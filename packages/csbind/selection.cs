// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var playerSelection = PlayerSelection.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PlayerSelection
    {
        [JsonProperty("player", NullValueHandling = NullValueHandling.Ignore)]
        public string Player { get; set; }

        [JsonProperty("skill", NullValueHandling = NullValueHandling.Ignore)]
        public string Skill { get; set; }

        [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
        public AttackTargetOpinion? Target { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("pet", NullValueHandling = NullValueHandling.Ignore)]
        public string Pet { get; set; }
    }

    public enum AttackTargetOpinion { Opponent, Self };

    public enum TypeEnum { DoNothing, Surrender, SwitchPet, UseSkill };

    public partial class PlayerSelection
    {
        public static PlayerSelection FromJson(string json) => JsonConvert.DeserializeObject<PlayerSelection>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PlayerSelection self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AttackTargetOpinionConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AttackTargetOpinionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AttackTargetOpinion) || t == typeof(AttackTargetOpinion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "opponent":
                    return AttackTargetOpinion.Opponent;
                case "self":
                    return AttackTargetOpinion.Self;
            }
            throw new Exception("Cannot unmarshal type AttackTargetOpinion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AttackTargetOpinion)untypedValue;
            switch (value)
            {
                case AttackTargetOpinion.Opponent:
                    serializer.Serialize(writer, "opponent");
                    return;
                case AttackTargetOpinion.Self:
                    serializer.Serialize(writer, "self");
                    return;
            }
            throw new Exception("Cannot marshal type AttackTargetOpinion");
        }

        public static readonly AttackTargetOpinionConverter Singleton = new AttackTargetOpinionConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "do-nothing":
                    return TypeEnum.DoNothing;
                case "surrender":
                    return TypeEnum.Surrender;
                case "switch-pet":
                    return TypeEnum.SwitchPet;
                case "use-skill":
                    return TypeEnum.UseSkill;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.DoNothing:
                    serializer.Serialize(writer, "do-nothing");
                    return;
                case TypeEnum.Surrender:
                    serializer.Serialize(writer, "surrender");
                    return;
                case TypeEnum.SwitchPet:
                    serializer.Serialize(writer, "switch-pet");
                    return;
                case TypeEnum.UseSkill:
                    serializer.Serialize(writer, "use-skill");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
